# v1.0
# requires: nxlog_main_windows.conf

# Define Eventlog Input
<Input Eventlog_input>
    Module im_msvistalog
    SavePos TRUE
    Query       <QueryList>\
                    <Query Id="0">\
                        <Select Path="Application">*</Select>\
                        <Select Path="System">*</Select>\
                        <Select Path="Security">*</Select>\
                        <Select Path="Setup">*</Select>\
                    </Query>\
                </QueryList>
	# Drop Informational and Debug Level Messages
	Exec if $SeverityValue <= 2 drop();
    # Set Graylog Facility
	Exec $facility = 'windows_eventlog';
	# Remove Unneeded Fields
    Exec delete($EventReceivedTime);
    Exec delete($SourceModuleName);
    Exec delete($SourceModuleType);
    Exec delete($Hostname);
    Exec delete($Keywords);
    Exec delete($RecordNumber);
    Exec delete($ThreadID);
	# Don't log huge auth failure info twice
	Exec if $EventID == 4625 $Message = "Username:"+$TargetUserName+" from Computer:"+$WorkstationName+" failed to log on.";
	
    # REGEX EXAMPLES for filtering:
    # "\s" equals one white space character, and ".*" equals any one char 
    # Line Contains both "bubble" and "gum"
    #   Search pattern: ^(?=.*?\bbubble\b)(?=.*?\bgum\b).*
    # Line does Not Contain "boy"
    #   Search pattern: ^(?!.*boy).*
    # Line Contains "bubble" but Neither "gum" Nor "bath"
    #   Search pattern: ^(?=.*bubble)(?!.*gum)(?!.*bath).*

    # Uncomment next line to view all logs, we can view output to help 
    # create the regex, next line shows my $raw_event data to parse:
    # 2013-11-18 15:23:02 INFO 2013-12-18 15:23:01 ahost.adomain.local INFO 62464 UVD Information
    # Exec   log_info($raw_event) ;
    # Exec if ($raw_event =~ /INFO\s+62464/) drop();
	# cleaner one:
	# Exec if ($EventType == 'INFO' and $EventID == 4648) drop();
</Input>

# Set small memory buffer
<Processor buffer_eventlog>
    Module pm_buffer
    WarnLimit 2048
    MaxSize 4096
    Type Mem
</Processor>

# Test output to file for debugging
#<Output Eventlog_output>
#    Module  om_file
#    Exec    $raw_event = to_json();
#    file    'C:\Program Files (x86)\nxlog\data\debug_eventlog.log'
#</Output>

# Define Eventlog to Graylog Route
<Route eventlog_to_graylog>
    Path Eventlog_input => buffer_eventlog => Graylog_GELF_tcp
</Route>

# Define debug route
#<Route debug>
#    Path Eventlog_input => Eventlog_output
#</Route>


# Alternative Eventlog Query:
#  Query <QueryList>\
#  <Query Id="0">\
#  <Select Path="Security">*</Select>\
#  <Suppress Path="Security">*[System[(EventID=4624 or EventID=4776 or EventID=4634 or EventID=4672 or EventID=4688)]]</Suppress>\
#  <Select Path="System">*[System[(EventID=1074 or (EventID &gt;= 6005 and EventID &lt;= 6009) or EventID=6013)]]</Select>\
#  <Select Path="Microsoft-Windows-TerminalServices-LocalSessionManager/Operational">*</Select>\
#  </Query>\
#  </QueryList>
#
#
# This is giving us a few things:
#  Security Log: we’ve excluded a few ID’s, purely because they were generating way too much traffic to be useful (the “User has logged on”, for example, generated over 6 million log entries in 24 hours…) – if you’re going to be logging your security logs into this thing, you need to exclude stuff. Otherwise you’ll just end up filling your disk way too quickly. Just as an example, leaving security as *, we used 13GB in less than 24 hours – suppressing those 5 event ID’s changed that to only 300MB in 24 hours…
#  System Log: we’re only including a few things here – the logs that tell us when the server was shut down/restarted/started.
#  Terminal Services – Local Session Manager: this was picked up by a colleague who included it here. This little log lets us know when people are logging on to the domain controller – in particularly, when people are logging on directly to the domain controller via the console. This is bad and we want to strongly discourage it…so we log it.
