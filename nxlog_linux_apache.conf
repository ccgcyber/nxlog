# v1.0
# requires: nxlog_main_linux.conf

# Set default APACHE LOG
define APACHE_LOG_DIR '/var/log/apache2/access.log'

# Apache Combined Log Format
#    LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\"" combined
#
#    %h is the remote host (ie the client IP)
#    %l is the identity of the user determined by identd (not usually used since not reliable)
#    %u is the user name determined by HTTP authentication
#    %t is the time the request was received.
#    %r is the request line from the client. ("GET / HTTP/1.0")
#    %>s is the status code sent from the server to the client (200, 404 etc.)
#    %b is the size of the response to the client (in bytes)
#    Referer is the page that linked to this URL.
#    User-agent is the browser identification string.

<Input Apache_Logs_input>
    Module        im_file
    File          %APACHE_LOG_DIR%
    SavePos   TRUE
        <Exec>
            if $raw_event =~ /^(\S+) (\S+) (\S+) \[([^\]]+)\] \"(\S+) (.+) HTTP.\d\.\d\" (\d+) (\d+) \"([^\"]+)\" \"([^\"]+)\"/
            {
                if $1 != '-' $ClientIP = $1;      \
                if $3 != '-' $AccountName = $3;   \
                $EventTime = parsedate($4);       \
                $HTTPMethod = $5;                 \
                $HTTPURL = $6;                    \
                $HTTPResponseStatus = $7;         \
                $FileSize = $8;                   \
                if $9 != '-' $HTTPReferer = $9;   \
                if $10 != '-' $HTTPUserAgent = $10;\
                $short_message = $HTTPMethod+" "+$HTTPURL+" "+$HTTPResponseStatus; \
                $facility = 'apache';             \
                delete($EventReceivedTime);       \
                delete($SourceModuleName);        \
                delete($SourceModuleType);        \
            } else { drop(); }
        </Exec>
	# Mediawiki runs scheduled jobs through HTTP, drop if unnecessary to log these entries
	#Exec if ( $ClientIP == "$MEDIAWIKI_HOSTIP" ) drop();
    
	# Drop Health Probe log entries
	Exec if ( $HTTPUserAgent == "varnish-probe" ) drop();
    Exec if ( $HTTPUserAgent =~ /^check_http/ ) drop();
</Input>

# Set small memory buffer
<Processor buffer_apache>
    Module pm_buffer
    WarnLimit 2048
    MaxSize 4096
    Type Mem
</Processor>

# Test output to file for debugging
#<Output Apache_Logs_output>
#    Module  om_file
#    Exec    $raw_event = to_json();
#    file    '/var/log/nxlog/debug_apache.log'
#</Output>

# Define Apache to Graylog Route
<Route apache_to_graylog>
    Path Apache_Logs_input => buffer_apache => Graylog_GELF_tcp
</Route>

# Define debug route
#<Route debug>
#    Path Apache_Logs_input => Apache_Logs_output
#</Route>