# v1.0
# requires: nxlog_main_linux.conf
# permissions: usermod -a -G varnish nxlog
# id nxlog

<Input input_varnish>
    Module     im_exec
    Command    /usr/bin/varnishncsa
    InputType  LineBased
    Restart    TRUE
    Arg        -F
    Arg        {"short_message": "%m %U","timestamp": %{%s}t,"ClientIP": "%{X-Forwarded-For}i","HTTPHost": "%{Host}i","duration_usec": %D,"HTTPResponseStatus": %s,"HTTPURL": "%U","content-type": "%{content-type}o","cache-key": "%{VCL_Log:key}x","HTTPMethod": "%m","time_first_byte": %{Varnish:time_firstbyte}x,"handling": "%{Varnish:handling}x","HTTPReferer": "%{Referrer}i","HTTPUserAgent": "%{User-agent}i"}
    Exec       parse_json();
    Exec       $facility = 'varnish';
    Exec       delete($EventReceivedTime);
    Exec       delete($SourceModuleName);
    Exec       delete($SourceModuleType);
	Exec if ( $HTTPUserAgent =~ /^check_http/ ) drop();
</Input>

# Set small memory buffer
<Processor buffer_varnish>
    Module pm_buffer
    WarnLimit 2048
    MaxSize 4096
    Type Mem
</Processor>

# Test output to file for debugging
#<Output varnish_logs_output>
#    Module  om_file
#    Exec    $raw_event = to_json();
#    file    '/var/log/nxlog/debug_varnish.log'
#</Output>

# Define Varnish Route to Graylog
<Route varnish_to_graylog>
    Path input_varnish => buffer_varnish => Graylog_GELF_tcp
</Route>

# Define debug route
#<Route debug>
#    Path input_varnish => varnish_logs_output
#</Route>
